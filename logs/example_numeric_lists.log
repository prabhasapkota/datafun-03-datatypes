2023-09-05 08:24:15,598 =============================================================
2023-09-05 08:24:15,598 =============================================================
2023-09-05 08:24:15,598 Today is 2023-09-05 at 08:24 AM
2023-09-05 08:24:15,598 This file is running on: posix Darwin 21.1.0
2023-09-05 08:24:15,598 The Python version is: 3.11.4
2023-09-05 08:24:15,598 The active conda environment is:  None
2023-09-05 08:24:15,598 The active pip environment is:    None
2023-09-05 08:24:15,598 The active environment path is:   /Library/Frameworks/Python.framework/Versions/3.11
2023-09-05 08:24:15,598 The current working directory is: /Users/prabha/Documents/CSIS-44608/datafun-03-datatypes
2023-09-05 08:24:15,598 This source file is in:           /Users/prabha/Documents/CSIS-44608/datafun-03-datatypes
2023-09-05 08:24:15,598 =============================================================
2023-09-05 08:24:15,598 =============================================================
2023-09-05 08:24:15,598 Calling functions from main block
2023-09-05 08:24:15,598 score_list: [105, 129, 87, 86, 111, 111, 89, 81, 108, 92, 110, 100, 75, 105, 103, 109, 76, 119, 99, 91, 103, 129, 106, 101, 84, 111, 74, 87, 86, 103, 103, 106, 86, 111, 75, 87, 102, 121, 111, 88, 89, 101, 106, 95, 103, 107, 101, 81, 109, 104]
2023-09-05 08:24:15,600 mean: 99.12
2023-09-05 08:24:15,600 median: 102.5
2023-09-05 08:24:15,600 mode: 111
2023-09-05 08:24:15,600 stdev: 13.388450703681062
2023-09-05 08:24:15,600 variance: 179.25061224489795
2023-09-05 08:24:15,600 xtimes_list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
2023-09-05 08:24:15,600 yvalues_list: [2, 5, 8, 20, 21, 23, 24, 27, 30, 31, 31, 32]
2023-09-05 08:24:15,600 correlation between x and y: 0.9436710692038198
2023-09-05 08:24:15,600 The equation of the best fit line is: y = 2.7762237762237763x + 3.121212121212121
2023-09-05 08:24:15,600 We predict that when x = {newx}, y will be about {newy}
2023-09-05 08:24:15,600 Given score list: [105, 129, 87, 86, 111, 111, 89, 81, 108, 92, 110, 100, 75, 105, 103, 109, 76, 119, 99, 91, 103, 129, 106, 101, 84, 111, 74, 87, 86, 103, 103, 106, 86, 111, 75, 87, 102, 121, 111, 88, 89, 101, 106, 95, 103, 107, 101, 81, 109, 104]
2023-09-05 08:24:15,600 The max() is 129
2023-09-05 08:24:15,600 The min() is 74
2023-09-05 08:24:15,600 The len() is 50
2023-09-05 08:24:15,600 The sum() is 4956
2023-09-05 08:24:15,600 The average is 99.12
2023-09-05 08:24:15,600 Given score list: [105, 129, 87, 86, 111, 111, 89, 81, 108, 92, 110, 100, 75, 105, 103, 109, 76, 119, 99, 91, 103, 129, 106, 101, 84, 111, 74, 87, 86, 103, 103, 106, 86, 111, 75, 87, 102, 121, 111, 88, 89, 101, 106, 95, 103, 107, 101, 81, 109, 104]
2023-09-05 08:24:15,600 Using the built-it function sorted(lst) gives: [74, 75, 75, 76, 81, 81, 84, 86, 86, 86, 87, 87, 87, 88, 89, 89, 91, 92, 95, 99, 100, 101, 101, 101, 102, 103, 103, 103, 103, 103, 104, 105, 105, 106, 106, 106, 107, 108, 109, 109, 110, 111, 111, 111, 111, 111, 119, 121, 129, 129]
2023-09-05 08:24:15,600 Using the built-in function sorted(lst,reverse=True) gives: [129, 129, 121, 119, 111, 111, 111, 111, 111, 110, 109, 109, 108, 107, 106, 106, 106, 105, 105, 104, 103, 103, 103, 103, 103, 102, 101, 101, 101, 100, 99, 95, 92, 91, 89, 89, 88, 87, 87, 87, 86, 86, 86, 84, 81, 81, 76, 75, 75, 74]
2023-09-05 08:24:15,600 new_scores is: [129, 129, 121, 119, 111, 111, 111, 111, 111, 110, 109, 109, 108, 107, 106, 106, 106, 105, 105, 104, 103, 103, 103, 103, 103, 102, 101, 101, 101, 100, 99, 95, 92, 91, 89, 89, 88, 87, 87, 87, 86, 86, 86, 84, 81, 81, 76, 75, 75, 74]
2023-09-05 08:24:15,600 Popped the first (index=0): 129 and now, new_scores is: [129, 121, 119, 111, 111, 111, 111, 111, 110, 109, 109, 108, 107, 106, 106, 106, 105, 105, 104, 103, 103, 103, 103, 103, 102, 101, 101, 101, 100, 99, 95, 92, 91, 89, 89, 88, 87, 87, 87, 86, 86, 86, 84, 81, 81, 76, 75, 75, 74]
2023-09-05 08:24:15,600 Popped the last (index=-1): 74 and now, new_scores is: [129, 121, 119, 111, 111, 111, 111, 111, 110, 109, 109, 108, 107, 106, 106, 106, 105, 105, 104, 103, 103, 103, 103, 103, 102, 101, 101, 101, 100, 99, 95, 92, 91, 89, 89, 88, 87, 87, 87, 86, 86, 86, 84, 81, 81, 76, 75, 75]
2023-09-05 08:24:15,600 Popped the fourth (index=3): 111 and now, new_scores is: [129, 121, 119, 111, 111, 111, 111, 110, 109, 109, 108, 107, 106, 106, 106, 105, 105, 104, 103, 103, 103, 103, 103, 102, 101, 101, 101, 100, 99, 95, 92, 91, 89, 89, 88, 87, 87, 87, 86, 86, 86, 84, 81, 81, 76, 75, 75]
2023-09-05 08:24:15,600 Score list: {score_list}
2023-09-05 08:24:15,600 Scores over 100: [<filter object at 0x104f36aa0>]
2023-09-05 08:24:15,600 Doubled scores: [<map object at 0x104f36a70>]
2023-09-05 08:24:15,600 Square root of scores: <map object at 0x104f37130>
2023-09-05 08:24:15,600 Radius list: [1, 2, 3, 4, 5]
2023-09-05 08:24:15,600 Area of circles: [<map object at 0x104f37190>]
2023-09-05 08:24:15,600 Score list: {score_list}
2023-09-05 08:24:15,600 Scores over 100 (using list comprehensions!): {scores_over_100}
2023-09-05 08:24:15,600 Scores under 42 (using list comprehensions!): {scores_under_42}
2023-09-05 08:24:15,600 Doubled scores (using list comprehensions!): {doubled_scores}
2023-09-05 08:24:15,600 Given radius_list: [1, 2, 3, 4, 5]
2023-09-05 08:24:15,600 Area of circles: [3.141592653589793, 12.566370614359172, 28.274333882308138, 50.26548245743669, 78.53981633974483]
2023-09-05 08:24:15,600 Circumference of circles: [6.283185307179586, 12.566370614359172, 18.84955592153876, 25.132741228718345, 31.41592653589793]
2023-09-05 08:24:15,600 Mastering comprehesions is a valuable skill for data scientists.
2023-09-05 08:24:15,600 Given numbers: [1, 2, 3, 4]
2023-09-05 08:24:15,600 Squares of numbers using [x ** 2 for x in numbers] is [1, 4, 9, 16]
2023-09-05 08:24:15,600 Add more logging statements to the code to see what happens.
2023-09-05 08:24:15,600 Explore enough to understand.
2023-09-05 08:24:15,600 Apply these skills to your own topic domain.
